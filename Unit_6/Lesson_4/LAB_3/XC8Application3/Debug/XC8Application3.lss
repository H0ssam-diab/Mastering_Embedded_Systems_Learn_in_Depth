
XC8Application3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000214  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000243  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000251  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008dc  00000000  00000000  00000289  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000058c  00000000  00000000  00000b65  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000285  00000000  00000000  000010f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  00001378  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  00001420  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  000015b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001790  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000192  00000192  00000206  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000017b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    0000002c  00000150  00000150  000001c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_1 00000038  000000a8  000000a8  0000011c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_2 00000038  000000e0  000000e0  00000154  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__vector_3 00000038  00000118  00000118  0000018c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_fini 00000002  0000019a  0000019a  0000020e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_funcs_on_exit 00000002  0000019c  0000019c  00000210  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_simulator_exit 00000002  0000019e  0000019e  00000212  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.exit    00000016  0000017c  0000017c  000001f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text._Exit   00000004  00000196  00000196  0000020a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 54 00 	jmp	0xa8	; 0xa8 <_etext>
   8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_2>
   c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__vector_3>
  10:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  14:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  18:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  1c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  20:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  24:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  28:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  2c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  30:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  34:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  38:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  3c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  40:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  44:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  48:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  4c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  50:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	e4 e5       	ldi	r30, 0x54	; 84
  62:	f0 e0       	ldi	r31, 0x00	; 0
  64:	40 e0       	ldi	r20, 0x00	; 0
  66:	17 c0       	rjmp	.+46     	; 0x96 <__do_clear_bss+0x8>
  68:	b5 91       	lpm	r27, Z+
  6a:	a5 91       	lpm	r26, Z+
  6c:	35 91       	lpm	r19, Z+
  6e:	25 91       	lpm	r18, Z+
  70:	05 91       	lpm	r16, Z+
  72:	07 fd       	sbrc	r16, 7
  74:	0c c0       	rjmp	.+24     	; 0x8e <__do_clear_bss>
  76:	95 91       	lpm	r25, Z+
  78:	85 91       	lpm	r24, Z+
  7a:	ef 01       	movw	r28, r30
  7c:	f9 2f       	mov	r31, r25
  7e:	e8 2f       	mov	r30, r24
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 17       	cp	r26, r18
  86:	b3 07       	cpc	r27, r19
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0x20>
  8a:	fe 01       	movw	r30, r28
  8c:	04 c0       	rjmp	.+8      	; 0x96 <__do_clear_bss+0x8>

0000008e <__do_clear_bss>:
  8e:	1d 92       	st	X+, r1
  90:	a2 17       	cp	r26, r18
  92:	b3 07       	cpc	r27, r19
  94:	e1 f7       	brne	.-8      	; 0x8e <__do_clear_bss>
  96:	e4 35       	cpi	r30, 0x54	; 84
  98:	f4 07       	cpc	r31, r20
  9a:	31 f7       	brne	.-52     	; 0x68 <__do_copy_data+0x8>
  9c:	0e 94 a8 00 	call	0x150	; 0x150 <main>
  a0:	0c 94 be 00 	jmp	0x17c	; 0x17c <exit>

000000a4 <_exit>:
  a4:	f8 94       	cli

000000a6 <__stop_program>:
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <__stop_program>

Disassembly of section .text:

00000192 <__bad_interrupt>:
 192:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

00000150 <main>:

int main(void)
{
	
	
	DDRD |= (0b111<<5); // SETTING THE PORTD AS AN OUTPUT FOR 5:7 PINS 
 150:	81 b3       	in	r24, 0x11	; 17
 152:	80 6e       	ori	r24, 0xE0	; 224
 154:	81 bb       	out	0x11, r24	; 17
	
	SREG |= (1<<7); // ENABLING THE INTERRUPTS 
 156:	8f b7       	in	r24, 0x3f	; 63
 158:	80 68       	ori	r24, 0x80	; 128
 15a:	8f bf       	out	0x3f, r24	; 63
	GICR |= (0b111<<5); // ENABLING EXTERNAL INTERRUPT
 15c:	8b b7       	in	r24, 0x3b	; 59
 15e:	80 6e       	ori	r24, 0xE0	; 224
 160:	8b bf       	out	0x3b, r24	; 59

	MCUCR |= (0b11<<2); // to make the INT1 RISING EDGE	
 162:	85 b7       	in	r24, 0x35	; 53
 164:	8c 60       	ori	r24, 0x0C	; 12
 166:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1<<0); // to make the INT0 SENSITIVE TO ANY LOGICAL CHANGE
 168:	85 b7       	in	r24, 0x35	; 53
 16a:	81 60       	ori	r24, 0x01	; 1
 16c:	85 bf       	out	0x35, r24	; 53
	MCUCSR &= ~(1<<6); // to make the INT2 FALLING EDGE
 16e:	84 b7       	in	r24, 0x34	; 52
 170:	8f 7b       	andi	r24, 0xBF	; 191
 172:	84 bf       	out	0x34, r24	; 52
	
	

    while(1){
		PORTD &= ~(0b111<<5);// reset all the pins between 5:7 in Port D
 174:	82 b3       	in	r24, 0x12	; 18
 176:	8f 71       	andi	r24, 0x1F	; 31
 178:	82 bb       	out	0x12, r24	; 18
 17a:	fc cf       	rjmp	.-8      	; 0x174 <main+0x24>

Disassembly of section .text.__vector_1:

000000a8 <__vector_1>:
			
	}
   
}

ISR(INT0_vect){
  a8:	1f 92       	push	r1
  aa:	0f 92       	push	r0
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	0f 92       	push	r0
  b0:	11 24       	eor	r1, r1
  b2:	2f 93       	push	r18
  b4:	8f 93       	push	r24
  b6:	9f 93       	push	r25
	PORTD |= (0b1<<5);
  b8:	82 b3       	in	r24, 0x12	; 18
  ba:	80 62       	ori	r24, 0x20	; 32
  bc:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	2f ef       	ldi	r18, 0xFF	; 255
  c0:	89 e6       	ldi	r24, 0x69	; 105
  c2:	98 e1       	ldi	r25, 0x18	; 24
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	80 40       	sbci	r24, 0x00	; 0
  c8:	90 40       	sbci	r25, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <__vector_1+0x1c>
  cc:	00 c0       	rjmp	.+0      	; 0xce <__vector_1+0x26>
  ce:	00 00       	nop
	_delay_ms(1000);
}
  d0:	9f 91       	pop	r25
  d2:	8f 91       	pop	r24
  d4:	2f 91       	pop	r18
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

Disassembly of section .text.__vector_2:

000000e0 <__vector_2>:
ISR(INT1_vect){
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	2f 93       	push	r18
  ec:	8f 93       	push	r24
  ee:	9f 93       	push	r25
	
		PORTD |= (0b1<<6);
  f0:	82 b3       	in	r24, 0x12	; 18
  f2:	80 64       	ori	r24, 0x40	; 64
  f4:	82 bb       	out	0x12, r24	; 18
  f6:	2f ef       	ldi	r18, 0xFF	; 255
  f8:	89 e6       	ldi	r24, 0x69	; 105
  fa:	98 e1       	ldi	r25, 0x18	; 24
  fc:	21 50       	subi	r18, 0x01	; 1
  fe:	80 40       	sbci	r24, 0x00	; 0
 100:	90 40       	sbci	r25, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <__vector_2+0x1c>
 104:	00 c0       	rjmp	.+0      	; 0x106 <__vector_2+0x26>
 106:	00 00       	nop
		_delay_ms(1000);
}
 108:	9f 91       	pop	r25
 10a:	8f 91       	pop	r24
 10c:	2f 91       	pop	r18
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti

Disassembly of section .text.__vector_3:

00000118 <__vector_3>:

ISR(INT2_vect){
 118:	1f 92       	push	r1
 11a:	0f 92       	push	r0
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	0f 92       	push	r0
 120:	11 24       	eor	r1, r1
 122:	2f 93       	push	r18
 124:	8f 93       	push	r24
 126:	9f 93       	push	r25
	
			PORTD |= (0b1<<7);
 128:	82 b3       	in	r24, 0x12	; 18
 12a:	80 68       	ori	r24, 0x80	; 128
 12c:	82 bb       	out	0x12, r24	; 18
 12e:	2f ef       	ldi	r18, 0xFF	; 255
 130:	89 e6       	ldi	r24, 0x69	; 105
 132:	98 e1       	ldi	r25, 0x18	; 24
 134:	21 50       	subi	r18, 0x01	; 1
 136:	80 40       	sbci	r24, 0x00	; 0
 138:	90 40       	sbci	r25, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <__vector_3+0x1c>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <__vector_3+0x26>
 13e:	00 00       	nop
			_delay_ms(1000);

 140:	9f 91       	pop	r25
 142:	8f 91       	pop	r24
 144:	2f 91       	pop	r18
 146:	0f 90       	pop	r0
 148:	0f be       	out	0x3f, r0	; 63
 14a:	0f 90       	pop	r0
 14c:	1f 90       	pop	r1
 14e:	18 95       	reti

Disassembly of section .text.__dummy_fini:

0000019a <_fini>:
 19a:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000019c <__funcs_on_exit>:
 19c:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000019e <__simulator_exit>:
 19e:	08 95       	ret

Disassembly of section .text.exit:

0000017c <exit>:
 17c:	ec 01       	movw	r28, r24
 17e:	0e 94 ce 00 	call	0x19c	; 0x19c <__funcs_on_exit>
 182:	0e 94 cd 00 	call	0x19a	; 0x19a <_fini>
 186:	ce 01       	movw	r24, r28
 188:	0e 94 cf 00 	call	0x19e	; 0x19e <__simulator_exit>
 18c:	ce 01       	movw	r24, r28
 18e:	0e 94 cb 00 	call	0x196	; 0x196 <_Exit>

Disassembly of section .text._Exit:

00000196 <_Exit>:
 196:	0e 94 52 00 	call	0xa4	; 0xa4 <_exit>
